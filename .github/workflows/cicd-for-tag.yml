name: cicd-for-tag

on:
  push:
    tags:
        - 'v*.*.*'

env:
  REGISTRY: v2-zcr.cloudzcp.io
  REPOSIOTRY: v2-zcr.cloudzcp.io/cloudzcp/kks-mlflow-app
  NAMESPACE: ai-ops
  DEPLOYMENT: kks-mlflow-app
  CONTAINER: kks-mlflow-app

jobs:
  build-push-deploy:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Private Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
          password: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REPOSIOTRY }}
          tags: |
            # type=ref,event=tag
            type=semver,pattern={{version}}

      - name: Build and push Docker images to Private Registry
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        # with:
        #   version: '1.28.3' # default is latest stable

      - name: Set image to patch for deployment
        run: |
          # Configure kubectl with Kubeconfig
          mkdir -p $HOME/.kube

          echo "${{ secrets.AGS_KUBE_CONFIG }}" > $HOME/.kube/config
          kubectl config set-context --current --namespace=${{ env.NAMESPACE }}

          # set image
          kubectl set image deployment/${{ env.DEPLOYMENT }} ${{ env.CONTAINER }}=${{ env.REPOSIOTRY }}:${{ env.DOCKER_METADATA_OUTPUT_VERSION }}

      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@v1
      #   with:
      #     subject-name: v2-zcr.cloudzcp.io/cloudzcp/zcp-webhook-dummy
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: true
